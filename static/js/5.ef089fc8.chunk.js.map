{"version":3,"sources":["resources/img/mjolnir.png","components/randomChar/RandomChar.js","components/charList/CharList.js","components/skeleton/Skeleton.js","components/charInfo/CharInfo.js","components/charSearchForm/CharSearchForm.js","resources/img/vision.png","components/pages/MainPage.js","components/errorMessage/error.png","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","components/errorBoundary/ErrorBoundary.js"],"names":["View","char","name","thumbnail","description","homepage","wiki","imgStyle","className","src","style","alt","href","RandomChar","useState","setChar","MarvelService","loading","error","clearError","getCharacterById","useEffect","updateChar","onCharLoaded","id","Math","floor","random","then","errorMessage","ErrorMessage","spinner","Spinner","content","onClick","mjolnir","CharList","props","charList","setCharList","newItemLoading","setNewItemLoading","offset","setOffset","charEnded","setCharEnded","itemRefs","useRef","getAllCharacters","onRequest","initial","onCharListLoaded","newCharList","ended","length","focusOnItem","current","forEach","item","classList","remove","add","focus","items","arr","map","i","ref","el","onCharSelected","onKeyPress","e","key","renderItems","disabled","Skeleton","comics","slice","CharInfo","charId","skeleton","CharSearchForm","useMarvelService","getCharacterByName","results","to","initialValues","charName","validationSchema","Yup","required","onSubmit","htmlFor","type","placeholder","component","MainPage","selectedChar","setSelectedChar","Helmet","ErrorBoundary","decoration","img","display","width","height","objectFit","margin","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","data","message","useHttp","_apiBase","_apiKey","_baseOffset","a","res","_transformCharacter","getAllComics","_transformComics","getComic","substr","path","extension","urls","title","price","prices","pageCount","language","textObjects","children","console","log"],"mappings":"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","file":"static/js/5.ef089fc8.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/mjolnir.61f31e18.png\";","import {useState, useEffect} from 'react';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport './randomChar.scss';\r\nimport mjolnir from '../../resources/img/mjolnir.png';\r\nimport MarvelService from '../../services/MarvelService';\r\n\r\nconst RandomChar = () => {\r\n\r\n    const [char, setChar] = useState({});\r\n\r\n    const {loading, error, clearError, getCharacterById} = MarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n    }, []);\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = () => {\r\n        clearError();\r\n        const id = Math.floor(Math.random() * (1011300 - 1011200) + 1011000);\r\n        getCharacterById(id)\r\n            .then(onCharLoaded)\r\n    }\r\n\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const spinner = loading ? <Spinner/> : null;\r\n    const content = !(loading || error) ? <View char={char}/> : null;\r\n\r\n    return (\r\n        <div className=\"randomchar\">\r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n            \r\n            <div className=\"randomchar__static\">\r\n                <p className=\"randomchar__title\">\r\n                    Random character for today!<br/>\r\n                    Do you want to get to know him better?\r\n                </p>\r\n                <p className=\"randomchar__title\">\r\n                    Or choose another one\r\n                </p>\r\n                <button \r\n                    className=\"button button__main\"\r\n                    onClick={updateChar}>\r\n                    <div className=\"inner\">try it</div>\r\n                </button>\r\n                <img src={mjolnir} alt=\"mjolnir\" className=\"randomchar__decoration\"/>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nconst View = ({char}) => {\r\n\r\n    const {name, thumbnail, description, homepage, wiki} = char;\r\n\r\n    let imgStyle = {'objectFit' : 'cover'};\r\n\r\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n        imgStyle = {'objectFit' : 'contain'};\r\n    }\r\n\r\n    return (\r\n        <div className=\"randomchar__block\">\r\n            <img src={thumbnail} style={imgStyle} alt=\"Random character\" className=\"randomchar__img\"/>\r\n            <div className=\"randomchar__info\">\r\n                <p className=\"randomchar__name\">{name}</p>\r\n                <p className=\"randomchar__descr\">\r\n                    {description}\r\n                </p>\r\n                <div className=\"randomchar__btns\">\r\n                    <a href={homepage} className=\"button button__main\">\r\n                        <div className=\"inner\">homepage</div>\r\n                    </a>\r\n                    <a href={wiki} className=\"button button__secondary\">\r\n                        <div className=\"inner\">Wiki</div>\r\n                    </a>\r\n                </div>\r\n            </div>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default RandomChar;","import {useState, useEffect, useRef} from 'react';\r\nimport Spinner from '../spinner/Spinner';\r\nimport PropTypes from 'prop-types';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport MarvelService from '../../services/MarvelService';\r\nimport './charList.scss';\r\n\r\nconst CharList = (props) => {\r\n\r\n    const [charList, setCharList] = useState([]);\r\n    const [newItemLoading, setNewItemLoading] = useState(false);\r\n    const [offset, setOffset] = useState(240);\r\n    const [charEnded, setCharEnded] = useState(false);\r\n    const itemRefs = useRef([]);\r\n    \r\n    const {loading, error, getAllCharacters} = MarvelService();\r\n\r\n    useEffect(() => {\r\n        onRequest(offset, true);\r\n    }, []);\r\n\r\n    const onRequest = (offset, initial) => {\r\n        initial ? setNewItemLoading(false) : setNewItemLoading(true)\r\n        getAllCharacters(offset)\r\n            .then(onCharListLoaded)\r\n    }\r\n\r\n    const onCharListLoaded = (newCharList) => {\r\n\r\n        let ended = false;\r\n        if (newCharList.length < 9) {\r\n            ended = true;\r\n        }\r\n\r\n        setCharList([...charList, ...newCharList]);\r\n        setNewItemLoading(false);\r\n        setOffset(offset => offset + 9);\r\n        setCharEnded(ended);\r\n    }\r\n\r\n    const focusOnItem = (id) => {\r\n        itemRefs.current.forEach(item => item.classList.remove('char__item_selected'));\r\n        itemRefs.current[id].classList.add('char__item_selected');\r\n        itemRefs.current[id].focus();\r\n    }\r\n\r\n    const renderItems = (arr) => {\r\n        const items =  arr.map((item, i) => {\r\n            let imgStyle = {'objectFit' : 'cover'};\r\n            if (item.thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n                imgStyle = {'objectFit' : 'unset'};\r\n            }\r\n            \r\n            return (\r\n                <li \r\n                    className={'char__item'}\r\n                    key={item.id}\r\n                    ref={el => itemRefs.current[i] = el}\r\n                    onClick={() => {\r\n                        props.onCharSelected(item.id);\r\n                        focusOnItem(i);\r\n                    }}\r\n                    onKeyPress={(e) => {\r\n                        if (e.key === ' ' || e.key === \"Enter\") {\r\n                            props.onCharSelected(item.id);\r\n                            focusOnItem(i);\r\n                        }\r\n                    }}\r\n                    >\r\n                        <img src={item.thumbnail} alt={item.name} style={imgStyle}/>\r\n                        <div className=\"char__name\">{item.name}</div>\r\n                </li>\r\n            )\r\n        });\r\n        return (\r\n            <ul className=\"char__grid\">\r\n                {items}\r\n            </ul>\r\n        )\r\n    }\r\n    \r\n    const items = renderItems(charList);\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const spinner = loading && !newItemLoading ? <Spinner/> : null;\r\n\r\n    return (\r\n        <div className=\"char__list\">\r\n            {errorMessage}\r\n            {spinner}\r\n            {items}\r\n            <button \r\n                className=\"button button__main button__long\"\r\n                disabled={newItemLoading}\r\n                style={{'display': charEnded ? 'none' : 'block'}}\r\n                onClick={() => onRequest(offset)}>\r\n                <div className=\"inner\">load more</div>\r\n            </button>\r\n        </div>\r\n    )\r\n}\r\n\r\nCharList.propTypes = {\r\n    onCharSelected: PropTypes.func.isRequired\r\n}\r\n\r\nexport default CharList;","import './skeleton.scss';\r\n\r\nconst Skeleton = () => {\r\n    return (\r\n        <>\r\n            <p className=\"char__select\">Please select a character to see information</p>\r\n            <div className=\"skeleton\">\r\n                <div className=\"pulse skeleton__header\">\r\n                    <div className=\"pulse skeleton__circle\"></div>\r\n                    <div className=\"pulse skeleton__mini\"></div>\r\n                </div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n                <div className=\"pulse skeleton__block\"></div>\r\n            </div>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default Skeleton;","import {useState, useEffect} from 'react';\r\nimport PropTypes from 'prop-types'\r\nimport './charInfo.scss';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport Skeleton from '../skeleton/Skeleton'\r\nimport MarvelService from '../../services/MarvelService';\r\n\r\nconst CharInfo = (props) => {\r\n\r\n    const [char, setChar] = useState(null);\r\n\r\n    const {loading, error, getCharacterById, clearError} = MarvelService();\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n    }, []);\r\n\r\n    useEffect(() => {\r\n        updateChar();\r\n    }, [props.charId])\r\n\r\n    const updateChar = () => {\r\n        const {charId} = props;\r\n        if (!charId) {\r\n            return;\r\n        }\r\n\r\n        clearError();\r\n        getCharacterById(charId)\r\n            .then(onCharLoaded)\r\n    }\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const skeleton = char || loading || error ? null : <Skeleton/>;\r\n    const errorMessage = error ? <ErrorMessage/> : null;\r\n    const spinner = loading ? <Spinner/> : null;\r\n    const content = !(loading || error || !char) ? <View char={char}/> : null;\r\n\r\n    return (\r\n        <div className=\"char__info\">\r\n            {skeleton}\r\n            {errorMessage}\r\n            {spinner}\r\n            {content}\r\n        </div>\r\n    )\r\n}\r\n\r\nconst View = ({char}) => {\r\n    const {name, description, thumbnail, homepage, wiki, comics} = char;\r\n\r\n    let imgStyle = {'objectFit' : 'cover'};\r\n\r\n    if (thumbnail === 'http://i.annihil.us/u/prod/marvel/i/mg/b/40/image_not_available.jpg') {\r\n        imgStyle = {'objectFit' : 'contain'};\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <div className=\"char__basics\">\r\n                <img src={thumbnail} alt={name} style={imgStyle}/>\r\n                <div>\r\n                    <div className=\"char__info-name\">{name}</div>\r\n                    <div className=\"char__btns\">\r\n                        <a href={homepage} className=\"button button__main\">\r\n                            <div className=\"inner\">homepage</div>\r\n                        </a>\r\n                        <a href={wiki} className=\"button button__secondary\">\r\n                            <div className=\"inner\">Wiki</div>\r\n                        </a>\r\n                    </div>\r\n                </div>\r\n            </div>\r\n            <div className=\"char__descr\">\r\n                {description}\r\n            </div>\r\n            <div className=\"char__comics\">Comics:</div>\r\n            <ul className=\"char__comics-list\">\r\n                {\r\n                    (comics.length === 0) \r\n                    ? \r\n                    <div>There is no comics for this character :(</div>\r\n                    :\r\n                    comics.slice(0, 10).map((item, i) => {\r\n                        return (\r\n                            <li key={i} className=\"char__comics-item\">\r\n                                {item.name}\r\n                            </li>\r\n                        )\r\n                    })\r\n                }\r\n            </ul>\r\n        </>\r\n    )\r\n}\r\n\r\nCharInfo.propTypes = {\r\n    charId: PropTypes.number\r\n}\r\n\r\nexport default CharInfo;","import {useState} from 'react';\r\nimport { Formik, Form, Field, ErrorMessage as FormikErrorMessage } from 'formik';\r\nimport * as Yup from 'yup';\r\nimport {Link} from 'react-router-dom';\r\n\r\nimport useMarvelService from '../../services/MarvelService';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nimport './charSearchForm.scss';\r\n\r\nconst CharSearchForm = () => {\r\n    const [char, setChar] = useState(null);\r\n    const {loading, error, getCharacterByName, clearError} = useMarvelService();\r\n\r\n    const onCharLoaded = (char) => {\r\n        setChar(char);\r\n    }\r\n\r\n    const updateChar = (name) => {\r\n        clearError();\r\n\r\n        getCharacterByName(name)\r\n            .then(onCharLoaded);\r\n    }\r\n\r\n    const errorMessage = error ? <div className=\"char__search-critical-error\"><ErrorMessage /></div> : null;\r\n    const results = !char ? null : char.length > 0 ?\r\n                    <div className=\"char__search-wrapper\">\r\n                        <div className=\"char__search-success\">There is! Visit {char[0].name} page?</div>\r\n                        <Link to={`/characters/${char[0].id}`} className=\"button button__secondary\">\r\n                            <div className=\"inner\">To page</div>\r\n                        </Link>\r\n                    </div> : \r\n                    <div className=\"char__search-error\">\r\n                        The character was not found. Check the name and try again\r\n                    </div>;\r\n\r\n    return (\r\n        <div className=\"char__search-form\">\r\n            <Formik\r\n                initialValues = {{\r\n                    charName: ''\r\n                }}\r\n                validationSchema = {Yup.object({\r\n                    charName: Yup.string().required('This field is required')\r\n                })}\r\n                onSubmit = { ({charName}) => {\r\n                    updateChar(charName);\r\n                }}\r\n            >\r\n                <Form>\r\n                    <label className=\"char__search-label\" htmlFor=\"charName\">Or find a character by name:</label>\r\n                    <div className=\"char__search-wrapper\">\r\n                        <Field \r\n                            id=\"charName\" \r\n                            name='charName' \r\n                            type='text' \r\n                            placeholder=\"Enter name\"/>\r\n                        <button \r\n                            type='submit' \r\n                            className=\"button button__main\"\r\n                            disabled={loading}>\r\n                            <div className=\"inner\">find</div>\r\n                        </button>\r\n                    </div>\r\n                    <FormikErrorMessage component=\"div\" className=\"char__search-error\" name=\"charName\" />\r\n                </Form>\r\n            </Formik>\r\n            {results}\r\n            {errorMessage}\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default CharSearchForm;","export default __webpack_public_path__ + \"static/media/vision.067d4ae1.png\";","import {useState} from 'react';\r\nimport { Helmet } from 'react-helmet';\r\n\r\nimport RandomChar from \"../randomChar/RandomChar\";\r\nimport CharList from \"../charList/CharList\";\r\nimport CharInfo from \"../charInfo/CharInfo\";\r\nimport CharSearchForm from '../charSearchForm/CharSearchForm';\r\nimport ErrorBoundary from \"../errorBoundary/ErrorBoundary\";\r\nimport decoration from '../../resources/img/vision.png';\r\n\r\nconst MainPage = () => {\r\n\r\n    const [selectedChar, setSelectedChar] = useState(null)\r\n\r\n    const onCharSelected = (id) => {\r\n        setSelectedChar(selectedChar => selectedChar = id)\r\n    }\r\n\r\n    return (\r\n        <>\r\n            <Helmet>\r\n                <meta\r\n                    name=\"description\"\r\n                    content=\"Marvel information portal\"\r\n                    />\r\n                <title>Marvel information portal</title>\r\n            </Helmet>\r\n            <ErrorBoundary>\r\n                <RandomChar/>\r\n            </ErrorBoundary>\r\n            <div className=\"char__content\">\r\n                <div>\r\n                    <ErrorBoundary>\r\n                        <CharInfo charId={selectedChar}/>\r\n                    </ErrorBoundary>\r\n                    <ErrorBoundary>\r\n                        <CharSearchForm/>\r\n                    </ErrorBoundary>\r\n                </div>\r\n                <ErrorBoundary>\r\n                    <CharList onCharSelected={onCharSelected}/>\r\n                </ErrorBoundary>\r\n            </div>\r\n            <img className=\"bg-decoration\" src={decoration} alt=\"vision\"/>\r\n        </>\r\n    )\r\n}\r\n\r\nexport default MainPage;","export default __webpack_public_path__ + \"static/media/error.9c0716bc.png\";","import img from './error.png'\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img src={img} style={{display: 'block', width: '230px', height: '230px', objectFit: 'contain', margin: '0 auto'}} alt='Error'/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import {useHttp} from '../hooks/http.hook'\r\n\r\nconst MarvelService = () => {\r\n\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=73da627187167e6c6216bd7cbd93f7f2';\r\n    const _baseOffset = 201;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getAllComics = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const getCharacterById = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n\r\n        return {\r\n            id: char.id,\r\n            name: (char.name.length > 22) ? char.name.substr(0, 22) + '...' : char.name,\r\n            description: char.description ? char.description.substr(0, 203) + '...' : 'There is no data for this character :(',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            price: comics.prices[0].price + '$',\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            language: comics.textObjects.language || 'en-us'\r\n        }\r\n    }\r\n\r\n    return {loading, error, clearError, getAllCharacters, getCharacterById, getAllComics, getComic, getCharacterByName}\r\n}\r\n\r\nexport default MarvelService;","import {useState, useCallback} from 'react';\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n\r\n        } catch (e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError}\r\n}","import {useState} from 'react';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\n\r\nconst ErrorBoundary = (props) => {\r\n\r\n    const [error, setError] = useState(false);\r\n\r\n    try {\r\n        if (error) {\r\n            return <ErrorMessage/>\r\n        }\r\n\r\n        return props.children;\r\n    } catch (e) {\r\n        console.log(e);\r\n        setError(true)\r\n    }\r\n}\r\n\r\nexport default ErrorBoundary;"],"sourceRoot":""}