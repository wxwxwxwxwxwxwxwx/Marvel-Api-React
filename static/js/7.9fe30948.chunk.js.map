{"version":3,"sources":["components/pages/SinglePage.js","components/errorMessage/error.png","components/errorMessage/ErrorMessage.js","services/MarvelService.js","hooks/http.hook.js","resources/img/Avengers.png","resources/img/Avengers_logo.png","components/appBanner/AppBanner.js"],"names":["SinglePage","Component","dataType","id","useParams","useState","data","setData","MarvelService","loading","error","getComic","getCharacterById","clearError","useEffect","updateData","then","onDataLoaded","errorMessage","spinner","content","ErrorMessage","src","img","style","display","width","height","objectFit","margin","alt","setLoading","setError","request","useCallback","url","method","body","headers","fetch","response","ok","Error","status","json","message","useHttp","_apiBase","_apiKey","_baseOffset","getAllCharacters","a","offset","res","results","map","_transformCharacter","getAllComics","_transformComics","getCharacterByName","name","char","length","substr","description","thumbnail","path","extension","homepage","urls","wiki","comics","items","title","price","prices","pageCount","language","textObjects","AppBanner","className","avengers","avengersLogo"],"mappings":"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","file":"static/js/7.9fe30948.chunk.js","sourcesContent":["import { useParams } from 'react-router-dom';\r\nimport { useState, useEffect } from 'react';\r\n\r\nimport MarvelService from '../../services/MarvelService';\r\nimport Spinner from '../spinner/Spinner';\r\nimport ErrorMessage from '../errorMessage/ErrorMessage';\r\nimport AppBanner from \"../appBanner/AppBanner\";\r\n\r\nconst SinglePage = ({Component, dataType}) => {\r\n        const {id} = useParams();\r\n        const [data, setData] = useState(null);\r\n        const {loading, error, getComic, getCharacterById, clearError} = MarvelService();\r\n\r\n        useEffect(() => {\r\n            updateData();\r\n        }, [id])\r\n\r\n        const updateData = () => {\r\n            clearError();\r\n\r\n            switch (dataType) {\r\n                case 'comic':\r\n                    getComic(id).then(onDataLoaded);\r\n                    break;\r\n                case 'character':\r\n                    getCharacterById(id).then(onDataLoaded);\r\n                    break;\r\n                    \r\n            }\r\n        }\r\n\r\n        const onDataLoaded = (data) => {\r\n            setData(data);\r\n        }\r\n\r\n        const errorMessage = error ? <ErrorMessage/> : null;\r\n        const spinner = loading ? <Spinner/> : null;\r\n        const content = !(loading || error || !data) ? <Component data={data}/> : null;\r\n\r\n        return (\r\n            <>\r\n                <AppBanner/>\r\n                {errorMessage}\r\n                {spinner}\r\n                {content}\r\n            </>\r\n        )\r\n}\r\n\r\nexport default SinglePage;","export default __webpack_public_path__ + \"static/media/error.9c0716bc.png\";","import img from './error.png'\r\n\r\nconst ErrorMessage = () => {\r\n    return (\r\n        <img src={img} style={{display: 'block', width: '230px', height: '230px', objectFit: 'contain', margin: '0 auto'}} alt='Error'/>\r\n    )\r\n}\r\n\r\nexport default ErrorMessage;","import {useHttp} from '../hooks/http.hook'\r\n\r\nconst MarvelService = () => {\r\n\r\n    const {loading, request, error, clearError} = useHttp();\r\n\r\n    const _apiBase = 'https://gateway.marvel.com:443/v1/public/';\r\n    const _apiKey = 'apikey=73da627187167e6c6216bd7cbd93f7f2';\r\n    const _baseOffset = 201;\r\n\r\n    const getAllCharacters = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}characters?limit=9&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getAllComics = async (offset = _baseOffset) => {\r\n        const res = await request(`${_apiBase}comics?limit=8&offset=${offset}&${_apiKey}`);\r\n        return res.data.results.map(_transformComics);\r\n    }\r\n\r\n    const getCharacterByName = async (name) => {\r\n        const res = await request(`${_apiBase}characters?name=${name}&${_apiKey}`);\r\n        return res.data.results.map(_transformCharacter);\r\n    }\r\n\r\n    const getComic = async (id) => {\r\n        const res = await request(`${_apiBase}comics/${id}?${_apiKey}`);\r\n        return _transformComics(res.data.results[0]);\r\n    }\r\n\r\n    const getCharacterById = async (id) => {\r\n        const res = await request(`${_apiBase}characters/${id}?${_apiKey}`);\r\n        return _transformCharacter(res.data.results[0]);\r\n    }\r\n\r\n    const _transformCharacter = (char) => {\r\n\r\n        return {\r\n            id: char.id,\r\n            name: (char.name.length > 22) ? char.name.substr(0, 22) + '...' : char.name,\r\n            description: char.description ? char.description.substr(0, 203) + '...' : 'There is no data for this character :(',\r\n            thumbnail: char.thumbnail.path + '.' + char.thumbnail.extension,\r\n            homepage: char.urls[0].url,\r\n            wiki: char.urls[1].url,\r\n            comics: char.comics.items\r\n        }\r\n    }\r\n\r\n    const _transformComics = (comics) => {\r\n\r\n        return {\r\n            id: comics.id,\r\n            title: comics.title,\r\n            thumbnail: comics.thumbnail.path + '.' + comics.thumbnail.extension,\r\n            price: comics.prices[0].price + '$',\r\n            description: comics.description || 'There is no description',\r\n            pageCount: comics.pageCount ? `${comics.pageCount} p.` : 'No information about the number of pages',\r\n            language: comics.textObjects.language || 'en-us'\r\n        }\r\n    }\r\n\r\n    return {loading, error, clearError, getAllCharacters, getCharacterById, getAllComics, getComic, getCharacterByName}\r\n}\r\n\r\nexport default MarvelService;","import {useState, useCallback} from 'react';\r\n\r\nexport const useHttp = () => {\r\n    const [loading, setLoading] = useState(false);\r\n    const [error, setError] = useState(null);\r\n\r\n    const request = useCallback(async (url, method = 'GET', body = null, headers = {'Content-Type': 'application/json'}) => {\r\n\r\n        setLoading(true);\r\n\r\n        try {\r\n            const response = await fetch(url, {method, body, headers});\r\n\r\n            if (!response.ok) {\r\n                throw new Error(`Could not fetch ${url}, status: ${response.status}`);\r\n            }\r\n\r\n            const data = await response.json();\r\n\r\n            setLoading(false);\r\n            return data;\r\n\r\n        } catch (e) {\r\n            setLoading(false);\r\n            setError(e.message);\r\n            throw e;\r\n        }\r\n    }, []);\r\n\r\n    const clearError = useCallback(() => setError(null), []);\r\n\r\n    return {loading, request, error, clearError}\r\n}","export default __webpack_public_path__ + \"static/media/Avengers.4065c8f9.png\";","export default __webpack_public_path__ + \"static/media/Avengers_logo.9eaf2193.png\";","import './appBanner.scss';\r\nimport avengers from '../../resources/img/Avengers.png';\r\nimport avengersLogo from '../../resources/img/Avengers_logo.png';\r\n\r\nconst AppBanner = () => {\r\n    return (\r\n        <div className=\"app__banner\">\r\n            <img src={avengers} alt=\"Avengers\"/>\r\n            <div className=\"app__banner-text\">\r\n                New comics every week!<br/>\r\n                Stay tuned!\r\n            </div>\r\n            <img src={avengersLogo} alt=\"Avengers logo\"/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default AppBanner;"],"sourceRoot":""}