{"version":3,"sources":["components/spinner/Spinner.js","components/appHeader/AppHeader.js","components/app/App.js","index.js"],"names":["Spinner","className","xmlns","xmlnsXlink","viewBox","preserveAspectRatio","d","fill","stroke","attributeName","type","dur","repeatCount","keyTimes","values","AppHeader","location","useLocation","console","log","to","style","isActive","pathname","indexOf","Page404","lazy","MainPage","ComicsPage","SingleComicLayout","SingleCharacterLayout","SinglePage","App","fallback","path","element","Component","dataType","ReactDOM","createRoot","document","getElementById","render","StrictMode"],"mappings":"iGAAA,iBAYeA,IAVC,WACZ,OACI,qBAAKC,UAAU,UAAUC,MAAM,6BAA6BC,WAAW,+BAA+BC,QAAQ,cAAcC,oBAAoB,WAAU,SACtJ,sBAAMC,EAAE,6CAA6CC,KAAK,UAAUC,OAAO,OAAM,SACjF,kCAAkBC,cAAc,YAAYC,KAAK,SAASC,IAAI,KAAKC,YAAY,aAAaC,SAAS,MAAMC,OAAO,4B,yKCiC/GC,EApCG,WAEd,IAAMC,EAAWC,cAKjB,OAJAC,QAAQC,IAAIH,GAKR,yBAAQf,UAAU,cAAa,UAC3B,oBAAIA,UAAU,aAAY,SACtB,eAAC,IAAI,CAACmB,GAAG,qBAAoB,UACzB,0CAAmB,2BAG3B,qBAAKnB,UAAU,YAAW,SACtB,+BACI,6BAAI,cAAC,IAAO,CACJoB,MAAO,YAAiB,IAAfC,EAAQ,EAARA,SACL,OAAIN,EAASO,SAASC,QAAQ,gBAAkB,GAC5CN,QAAQC,IAAI,KACL,CAAC,MAAS,YAEd,CAAC,MAASG,EAAW,UAAY,YAG5CF,GAAG,qBAAoB,0BAA0B,IAEzD,6BAAI,cAAC,IAAO,CACRC,MAAO,YAAU,MAAO,CAAC,MAAR,EAARC,SAAoC,UAAY,YACzDF,GAAG,0BAAyB,+B,QCzB9CK,EAAUC,gBAAK,kBAAM,uDACrBC,EAAWD,gBAAK,kBAAM,8DACtBE,EAAaF,gBAAK,kBAAM,uDACxBG,EAAoBH,gBAAK,kBAAM,wDAC/BI,EAAwBJ,gBAAK,kBAAM,uDACnCK,EAAaL,gBAAK,kBAAM,iCAwBfM,EAtBH,WAER,OACI,cAAC,IAAM,UACH,sBAAK/B,UAAU,MAAK,UAChB,cAAC,EAAS,IACV,+BACI,cAAC,WAAQ,CAACgC,SAAU,cAACjC,EAAA,EAAO,IAAG,SAC3B,eAAC,IAAM,WACH,cAAC,IAAK,CAACkC,KAAK,0BAA0BC,QAAS,cAACP,EAAU,MAC1D,cAAC,IAAK,CAACM,KAAK,8BAA8BC,QAAS,cAACJ,EAAU,CAACK,UAAWP,EAAmBQ,SAAS,YACtG,cAAC,IAAK,CAACH,KAAK,kCAAkCC,QAAS,cAACJ,EAAU,CAACK,UAAWN,EAAuBO,SAAS,gBAC9G,cAAC,IAAK,CAACH,KAAK,oBAAoBC,QAAS,cAACR,EAAQ,MAClD,cAAC,IAAK,CAACO,KAAK,IAAIC,QAAS,cAACV,EAAO,mB,MCdhDa,IAASC,WAAWC,SAASC,eAAe,SACpDC,OACH,cAAC,IAAMC,WAAU,UACf,cAAC,EAAG,S","file":"static/js/main.1c8a437d.chunk.js","sourcesContent":["import './spinner.scss';\r\n\r\nconst Spinner = () => {\r\n    return (\r\n        <svg className=\"spinner\" xmlns=\"http://www.w3.org/2000/svg\" xmlnsXlink=\"http://www.w3.org/1999/xlink\" viewBox=\"0 0 100 100\" preserveAspectRatio=\"xMidYMid\">\r\n            <path d=\"M10 50A40 40 0 0 0 90 50A40 42 0 0 1 10 50\" fill=\"#9f0013\" stroke=\"none\">\r\n            <animateTransform attributeName=\"transform\" type=\"rotate\" dur=\"1s\" repeatCount=\"indefinite\" keyTimes=\"0;1\" values=\"0 50 51;360 50 51\"></animateTransform>\r\n            </path>\r\n        </svg>\r\n    )\r\n}\r\n\r\nexport default Spinner;","import {Link, NavLink, useLocation} from 'react-router-dom';\r\nimport './appHeader.scss';\r\n\r\nconst AppHeader = () => {\r\n\r\n    const location = useLocation();\r\n    console.log(location);\r\n\r\n\r\n\r\n    return (\r\n        <header className=\"app__header\">\r\n            <h1 className=\"app__title\">\r\n                <Link to=\"/Marvel-Api-React/\">\r\n                    <span>Marvel</span> information portal\r\n                </Link>\r\n            </h1>\r\n            <nav className=\"app__menu\">\r\n                <ul>\r\n                    <li><NavLink \r\n                            style={({isActive}) => {\r\n                                if (location.pathname.indexOf('/characters') > -1) {\r\n                                    console.log(213);\r\n                                    return {'color': '#9f0013'}\r\n                                }\r\n                                return {'color': isActive ? '#9f0013' : 'inherit'}\r\n\r\n                            }}\r\n                            to=\"/Marvel-Api-React/\">Characters</NavLink></li>\r\n                    /\r\n                    <li><NavLink \r\n                        style={({isActive}) => ({'color': isActive ? '#9f0013' : 'inherit'})} \r\n                        to=\"Marvel-Api-React/comics\">Comics</NavLink></li>\r\n                </ul>\r\n            </nav>\r\n        </header>\r\n    )\r\n}\r\n\r\nexport default AppHeader;","import {lazy, Suspense} from 'react';\r\nimport { BrowserRouter as Router, Route, Routes } from 'react-router-dom';\r\n\r\nimport AppHeader from \"../appHeader/AppHeader\";\r\n\r\nimport Spinner from '../spinner/Spinner';\r\n\r\nconst Page404 = lazy(() => import('../pages/404/404'));\r\nconst MainPage = lazy(() => import('../pages/MainPage'));\r\nconst ComicsPage = lazy(() => import('../pages/ComicsPage'));\r\nconst SingleComicLayout = lazy(() => import('../pages/singleComicLayout/SingleComicLayout'));\r\nconst SingleCharacterLayout = lazy(() => import('../pages/singleCharacterLayout/SingleCharacterLayout'));\r\nconst SinglePage = lazy(() => import('../pages/SinglePage'));\r\n\r\nconst App = () => {\r\n\r\n    return (\r\n        <Router>\r\n            <div className=\"app\">\r\n                <AppHeader/>\r\n                <main>\r\n                    <Suspense fallback={<Spinner/>}>\r\n                        <Routes>\r\n                            <Route path=\"Marvel-Api-React/comics\" element={<ComicsPage/>}/>\r\n                            <Route path=\"Marvel-Api-React/comics/:id\" element={<SinglePage Component={SingleComicLayout} dataType='comic'/>}/>\r\n                            <Route path=\"Marvel-Api-React/characters/:id\" element={<SinglePage Component={SingleCharacterLayout} dataType='character'/>}/>\r\n                            <Route path=\"Marvel-Api-React/\" element={<MainPage/>}/>\r\n                            <Route path=\"*\" element={<Page404/>}/>                            \r\n                        </Routes>\r\n                    </Suspense>\r\n                </main>\r\n            </div>\r\n        </Router>\r\n    )\r\n}\r\n\r\nexport default App;","import React from 'react';\r\nimport ReactDOM from 'react-dom/client';\r\nimport App from './components/app/App';\r\n\r\n\r\nimport './style/style.scss';\r\n\r\n// const marvelService = new MarvelService();\r\n\r\n// marvelService.getAllCharacters().then(res => console.log(res))\r\n// marvelService.getAllCharacters().then(res => res.data.results.forEach(item => console.log(item.name)))\r\n// marvelService.getCharacterById(1011052).then(res => console.log(res))\r\n\r\nconst root = ReactDOM.createRoot(document.getElementById(\"root\"));\r\nroot.render(\r\n  <React.StrictMode>\r\n    <App />\r\n  </React.StrictMode>\r\n);\r\n\r\n"],"sourceRoot":""}